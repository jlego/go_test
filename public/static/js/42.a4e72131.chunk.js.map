{"version":3,"sources":["components/xlsx/xlsxExport.js"],"names":["downloadFile","data","filename","a","document","createElement","download","style","display","href","URL","createObjectURL","body","appendChild","click","removeChild","setTimeout","revokeObjectURL","View","tmpDown","downloadExcel","props","fileType","fileName","Array","isArray","length","k","_tmpdata","unshift","keyMap","push","tmpdata","map","v","i","j","Object","position","getCharCol","String","fromCharCode","reduce","prev","next","concat","forEach","outputPos","keys","tmpWB","SheetNames","Sheets","mySheet","Blob","str2char","XLSX","write","bookType","undefined","bookSST","type","s","buf","ArrayBuffer","view","Uint8Array","charCodeAt","n","m","this","buttonText","buttonSize","onClick","size","Component"],"mappings":"ySAGA,SAASA,EAAaC,EAAMC,GAC1B,IAAIC,EAAIC,SAASC,cAAc,KAC/BF,EAAEG,SAAWJ,EACbC,EAAEI,MAAMC,QAAU,OAClBL,EAAEM,KAAOC,IAAIC,gBAAgBV,GAC7BG,SAASQ,KAAKC,YAAYV,GAC1BA,EAAEW,QACFV,SAASQ,KAAKG,YAAYZ,GAC1Ba,YAAY,WAEVN,IAAIO,gBAAgBhB,KACnB,K,IAICiB,E,4MACJC,QAAU,G,EAEVC,c,sBAAgB,8CAAAjB,EAAA,2DAEqB,EAAKkB,MAAlCpB,EAFQ,EAERA,KAAMqB,EAFE,EAEFA,SAAUC,EAFR,EAEQA,SACH,oBAATtB,EAHI,gCAICA,IAJD,OAIZA,EAJY,kBAMdA,EAAOuB,MAAMC,QAAQxB,GAAQA,EAAO,IAC3ByB,OAPK,iDAWd,IAASC,KAHLC,EAAW3B,EAAK,GACpBA,EAAK4B,QAAQ,IACTC,EAAS,GACCF,EACZE,EAAOC,KAAKJ,GACZ1B,EAAK,GAAG0B,GAAKA,EAEXK,EAAU,GACd/B,EAAKgC,KAAI,SAACC,EAAGC,GAAJ,OACLL,EAAOG,KAAI,SAACN,EAAGS,GAAJ,OACTC,OAAA,IAAAA,CACE,GACA,CACEH,EAAGA,EAAEP,GACLW,UACGF,EAAI,GAAK,EAAKG,WAAWH,GAAKI,OAAOC,aAAa,GAAKL,KACvDD,EAAI,WAKdO,QAAO,SAACC,EAAMC,GAAP,OAAgBD,EAAKE,OAAOD,MACnCE,SAAQ,SAACZ,EAAGC,GAAJ,OAAWH,EAAQE,EAAEI,UAAY,CAAEJ,EAAGA,EAAEA,MAC/Ca,EAAYV,OAAOW,KAAKhB,GACxBiB,EAAQ,CACVC,WAAY,CAAC,WACbC,OAAQ,CACNC,QAASf,OAAA,IAAAA,CACP,GACAL,EACA,CACE,OAAQe,EAAU,GAAK,IAAMA,EAAUA,EAAUrB,OAAS,OAKlE,EAAKP,QAAU,IAAIkC,KACjB,CACE,EAAKC,SACHC,IAAKC,MACHP,EACA,CACEQ,cAAuBC,IAAbpC,EAAyB,OAASA,EAC5CqC,SAAS,EACTC,KAAM,aAKd,CACEA,KAAM,KAGV5D,EAAa,EAAKmB,QAASI,GA7Db,4C,8CAgEhB,SAASsC,GAGP,IAFA,IAAIC,EAAM,IAAIC,YAAYF,EAAEnC,QACxBsC,EAAO,IAAIC,WAAWH,GACjB3B,EAAI,EAAGA,IAAM0B,EAAEnC,SAAUS,EAAG6B,EAAK7B,GAAuB,IAAlB0B,EAAEK,WAAW/B,GAC5D,OAAO2B,I,wBAGT,SAAWK,GAGT,IAFA,IAAIN,EAAI,GACNO,EAAI,EACCD,EAAI,GACTC,EAAKD,EAAI,GAAM,EACfN,EAAIrB,OAAOC,aAAa2B,EAAI,IAAMP,EAClCM,GAAKA,EAAIC,GAAK,GAEhB,OAAOP,I,oBAET,WAAU,IAAD,EACgDQ,KAAKhD,MADrD,IACCiD,kBADD,MACY,oBADZ,MACuBC,kBADvB,MACkC,UADlC,EAEP,OAAQ,kBAAC,IAAD,CAAQC,QAASH,KAAKjD,cAAeqD,KAAMF,GAAaD,O,GAtFjDI,aAyFJxD","file":"static/js/42.a4e72131.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, } from \"antd\";\r\nimport XLSX from \"xlsx\";\r\nfunction downloadFile(data, filename) {\r\n  let a = document.createElement(\"a\"); //创建隐藏的可下载链接\r\n  a.download = filename;\r\n  a.style.display = \"none\";\r\n  a.href = URL.createObjectURL(data);\r\n  document.body.appendChild(a);\r\n  a.click(); // 触发点击\r\n  document.body.removeChild(a); // 然后移除\r\n  setTimeout( () => {\r\n    //延时释放\r\n    URL.revokeObjectURL(data); //用URL.revokeObjectURL()来释放这个object URL\r\n  }, 100);\r\n}\r\n\r\n\r\nclass View extends Component {\r\n  tmpDown = \"\"\r\n\r\n  downloadExcel = async () => {\r\n    //fileType传的附件类型，默认为excel\r\n    let { data, fileType, fileName } = this.props;\r\n    if(typeof data === 'function'){\r\n      data = await data()\r\n    }\r\n    data = Array.isArray(data) ? data : []\r\n    if(!data.length) return\r\n    let _tmpdata = data[0];\r\n    data.unshift({});\r\n    let keyMap = []; //获取keys\r\n    for (let k in _tmpdata) {\r\n      keyMap.push(k);\r\n      data[0][k] = k;\r\n    }\r\n    let tmpdata = []; //用来保存转换好的json\r\n    data.map((v, i) =>\r\n        keyMap.map((k, j) =>\r\n          Object.assign(\r\n            {},\r\n            {\r\n              v: v[k],\r\n              position:\r\n                (j > 25 ? this.getCharCol(j) : String.fromCharCode(65 + j)) +\r\n                (i + 1),\r\n            }\r\n          )\r\n        )\r\n      )\r\n      .reduce((prev, next) => prev.concat(next))\r\n      .forEach((v, i) => (tmpdata[v.position] = { v: v.v, }));\r\n    let outputPos = Object.keys(tmpdata); //设置区域,比如表格从A1到D10\r\n    let tmpWB = {\r\n      SheetNames: [\"mySheet\"], //保存的表标题\r\n      Sheets: {\r\n        mySheet: Object.assign(\r\n          {},\r\n          tmpdata, //内容\r\n          {\r\n            \"!ref\": outputPos[0] + \":\" + outputPos[outputPos.length - 1], //设置填充区域\r\n          }\r\n        ),\r\n      },\r\n    };\r\n    this.tmpDown = new Blob(\r\n      [\r\n        this.str2char(\r\n          XLSX.write(\r\n            tmpWB,\r\n            {\r\n              bookType: fileType === undefined ? \"xlsx\" : fileType,\r\n              bookSST: false,\r\n              type: \"binary\",\r\n            } //这里的数据是用来定义导出的格式类型\r\n          )\r\n        ),\r\n      ],\r\n      {\r\n        type: \"\",\r\n      }\r\n    ); //创建二进制对象写入转换好的字节流\r\n    downloadFile(this.tmpDown, fileName)\r\n  }\r\n  //字符串转字符流\r\n  str2char(s) {\r\n    let buf = new ArrayBuffer(s.length);\r\n    let view = new Uint8Array(buf);\r\n    for (let i = 0; i !== s.length; ++i) view[i] = s.charCodeAt(i) & 0xff;\r\n    return buf;\r\n  }\r\n  //将指定的自然数转换为26进制表示。映射关系：[0-25] -> [A-Z]。\r\n  getCharCol(n) {\r\n    let s = \"\",\r\n      m = 0;\r\n    while (n > 0) {\r\n      m = (n % 26) + 1;\r\n      s = String.fromCharCode(m + 64) + s;\r\n      n = (n - m) / 26;\r\n    }\r\n    return s;\r\n  }\r\n  render() {\r\n    const { buttonText='导出EXCEL', buttonSize='default' } = this.props;\r\n    return (<Button onClick={this.downloadExcel} size={buttonSize}>{buttonText}</Button>);\r\n  }\r\n}\r\nexport default View\r\n"],"sourceRoot":""}