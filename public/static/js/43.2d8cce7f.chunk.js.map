{"version":3,"sources":["components/xlsx/xlsxImport.js"],"names":["View","data","rABS","handleInput","file","fileList","onChange","props","inputFiles","originFileObj","reader","FileReader","readAsArrayBuffer","readAsBinaryString","onload","e","readData","target","result","XLSX","read","btoa","fixdata","type","resultData","utils","sheet_to_json","Sheets","SheetNames","str","len","w","byteLength","String","fromCharCode","apply","Uint8Array","slice","this","buttonText","buttonSize","style","display","name","showUploadList","customRequest","size","Component"],"mappings":"kRAIMA,E,4MACJC,KAAO,K,EACPC,MAAO,E,EAEPC,YAAc,YAAsB,EAApBC,KAAqB,IAAfC,EAAc,EAAdA,SACZC,EAAa,EAAKC,MAAlBD,SACJE,EAAaH,EAAS,GAAGI,cACzBC,EAAS,IAAIC,WACZH,IACD,EAAKN,KACPQ,EAAOE,kBAAkBJ,GAEzBE,EAAOG,mBAAmBL,GAE5BE,EAAOI,OAAS,SAAAC,GACd,IAAIC,EAAWD,EAAEE,OAAOC,OACpB,EAAKhB,KACP,EAAKD,KAAOkB,IAAKC,KAAKC,KAAK,EAAKC,QAAQN,IAAY,CAElDO,KAAM,WAGR,EAAKtB,KAAOkB,IAAKC,KAAKJ,EAAU,CAC9BO,KAAM,WAKV,IAAIC,EAAaL,IAAKM,MAAMC,cAAc,EAAKzB,KAAK0B,OAAO,EAAK1B,KAAK2B,WAAW,KAE7EtB,GAAUA,EAASkB,M,6CAI1B,SAAQvB,GAIN,IAHA,IAAI4B,EAAM,GACRC,EAAM,EACNC,EAAI,MACCD,EAAM7B,EAAK+B,WAAaD,IAAKD,EAClCD,GAAOI,OAAOC,aAAaC,MAAM,KAAM,IAAIC,WAAWnC,EAAKoC,MAAMP,EAAMC,EAAGD,EAAMC,EAAIA,KACpFF,GAAOI,OAAOC,aAAaC,MAAM,KAAM,IAAIC,WAAWnC,EAAKoC,MAAMP,EAAMC,KAEzE,OAAOF,I,oBAGT,WAAU,IAAD,EACgDS,KAAK/B,MADrD,IACCgC,kBADD,MACY,oBADZ,MACuBC,kBADvB,MACkC,UADlC,EAEP,OAAQ,0BAAMC,MAAO,CAACC,QAAS,iBAC7B,kBAAC,IAAD,CAAQC,KAAK,OAAOC,gBAAgB,EAAOtC,SAAUgC,KAAKnC,YAAa0C,cAAe,cACpF,kBAAC,IAAD,CAAQC,KAAMN,GAAaD,S,GAjDhBQ,aAsDJ/C","file":"static/js/43.2d8cce7f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Button, Upload, } from \"antd\";\r\nimport XLSX from \"xlsx\";\r\n\r\nclass View extends Component {\r\n  data = null //读取完成的数据\r\n  rABS = false\r\n\r\n  handleInput = ({file, fileList}) => {\r\n    const { onChange } = this.props\r\n    let inputFiles = fileList[0].originFileObj;\r\n    let reader = new FileReader();\r\n    if (!inputFiles) return;\r\n    if (this.rABS) {\r\n      reader.readAsArrayBuffer(inputFiles); //读取结果是一个 ArrayBuffer 对象\r\n    } else {\r\n      reader.readAsBinaryString(inputFiles); //将文件读取为二进制字符串\r\n    }\r\n    reader.onload = e => {\r\n      let readData = e.target.result;\r\n      if (this.rABS) {\r\n        this.data = XLSX.read(btoa(this.fixdata(readData)), {\r\n          //手动转化\r\n          type: \"base64\",\r\n        });\r\n      } else {\r\n        this.data = XLSX.read(readData, {\r\n          type: \"binary\",\r\n        });\r\n      }\r\n      //data.SheetNames[0]是获取Sheets中第一个Sheet的名字\r\n      //data.Sheets[Sheet名]获取第一个Sheet的数据\r\n      let resultData = XLSX.utils.sheet_to_json(this.data.Sheets[this.data.SheetNames[0]])\r\n      //把结果通知给父级组件\r\n      if(onChange) onChange(resultData)\r\n    };\r\n  }\r\n  //文件流转BinaryString\r\n  fixdata(data) {\r\n    let str = \"\",\r\n      len = 0,\r\n      w = 10240;\r\n    for (; len < data.byteLength / w; ++len){\r\n      str += String.fromCharCode.apply(null, new Uint8Array(data.slice(len * w, len * w + w)) );\r\n      str += String.fromCharCode.apply(null, new Uint8Array(data.slice(len * w)));\r\n    }\r\n    return str;\r\n  }\r\n\r\n  render() {\r\n    const { buttonText='导入EXCEL', buttonSize='default' } = this.props;\r\n    return (<span style={{display: 'inline-block'}}>\r\n      <Upload name=\"file\" showUploadList={false} onChange={this.handleInput} customRequest={()=>{}}>\r\n        <Button size={buttonSize}>{buttonText}</Button>\r\n      </Upload>\r\n    </span>);\r\n  }\r\n}\r\nexport default View\r\n"],"sourceRoot":""}