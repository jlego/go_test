{"version":3,"sources":["../node_modules/rc-tree-select/es/Context.js","../node_modules/rc-tree-select/es/hooks/useKeyValueMapping.js","../node_modules/rc-tree-select/es/hooks/useKeyValueMap.js","../node_modules/rc-tree-select/es/OptionList.js","../node_modules/rc-tree-select/es/TreeNode.js","../node_modules/rc-tree-select/es/utils/legacyUtil.js","../node_modules/rc-tree-select/es/utils/valueUtil.js","../node_modules/rc-tree-select/es/hooks/useTreeData.js","../node_modules/rc-tree-select/es/utils/strategyUtil.js","../node_modules/rc-tree-select/es/TreeSelect.js","../node_modules/rc-tree-select/es/hooks/useSelectValues.js","../node_modules/rc-tree-select/es/index.js","../node_modules/antd/es/tree-select/index.js","components/treeSelect/index.js"],"names":["SelectContext","React","isDisabled","dataNode","skipType","_dataNode$data","data","disabled","disableCheckbox","useKeyValueMapping","cacheKeyMap","cacheValueMap","key","arguments","length","undefined","ignoreDisabledCheck","get","value","useKeyValueMap","flattenOptions","Map","forEach","set","HIDDEN_STYLE","width","height","display","overflow","opacity","border","padding","margin","OptionList","props","ref","prefixCls","itemHeight","virtual","options","multiple","searchValue","onSelect","onToggleOpen","open","notFoundContent","onMouseEnter","_React$useContext","checkable","checkedKeys","halfCheckedKeys","treeExpandedKeys","treeDefaultExpandAll","treeDefaultExpandedKeys","onTreeExpand","treeIcon","showTreeIcon","switcherIcon","treeLine","treeNodeFilterProp","loadData","treeLoadedKeys","treeMotion","onTreeLoad","treeRef","memoOptions","useMemo","prev","next","_useKeyValueMap","_useKeyValueMap2","_slicedToArray","_useKeyValueMapping","_useKeyValueMapping2","getEntityByKey","getEntityByValue","valueKeys","map","val","entity","mergedCheckedKeys","checked","halfChecked","_treeRef$current","current","scrollTo","lowerSearchValue","String","toLowerCase","_React$useState","_React$useState2","expandedKeys","setExpandedKeys","_React$useState3","_React$useState4","searchExpandedKeys","setSearchExpandedKeys","mergedExpandedKeys","_toConsumableArray","o","onListMouseDown","event","preventDefault","onInternalSelect","_","_ref","node","selected","includes","_React$useState5","_React$useState6","activeKey","setActiveKey","activeEntity","onKeyDown","_treeRef$current2","which","KeyCode","UP","DOWN","LEFT","RIGHT","ENTER","ESC","onKeyUp","role","className","concat","onMouseDown","treeProps","loadedKeys","style","Tree","Object","assign","focusable","treeData","icon","showIcon","showLine","motion","checkStrictly","selectedKeys","defaultExpandAll","onActiveChange","onCheck","onExpand","keys","onLoad","filterTreeNode","treeNode","RefOptionList","displayName","TreeNode","convertChildrenToData","nodes","toArray","type","_node$props","children","restProps","_objectWithoutProperties","_objectSpread","childData","filter","fillLegacyProps","cloneNode","defineProperty","warning","Array","isArray","findValueOption","values","optionMap","flattenItem","isCheckDisabled","getLevel","level","parent","flattenTreeData","fillKey","list","clone","getRawValueLabeled","prevValue","getLabelProp","valueMap","item","_typeof","label","has","labeledValue","formatTreeData","Set","dig","dataNodes","rest","mergedValue","title","useTreeData","_ref2","simpleMode","cacheRef","id","pId","rootPId","keyNodes","rootNodeList","parentKey","push","parseSimpleTreeData","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","formatStrategyKeys","strategy","keyEntities","keySet","every","OMIT_PROPS","RefSelect","generateSelector","components","optionList","getLabeledValue","filterOptions","filterOptionFunc","optionFilterProp","filterOption","getDefaultFilterOption","keepAll","match","childList","isValueDisabled","option","omitDOMProps","cloneProps","prop","RefTreeSelect","treeCheckable","treeCheckStrictly","_props$showCheckedStr","showCheckedStrategy","labelInValue","_props$treeNodeFilter","treeNodeLabelProp","treeDataSimpleMode","dropdownPopupAlign","onChange","onDropdownVisibleChange","onDeselect","mergedCheckable","mergedMultiple","treeConduction","mergedLabelInValue","selectRef","focus","blur","getTreeNodeTitle","getTreeNodeLabelProp","mergedTreeData","conductKeyEntities","convertDataToEntities","_useMergedState","useMergedState","defaultValue","_useMergedState2","setValue","splitRawValues","newRawValues","missingRawValues","existRawValues","_useMemo2","valueHalfCheckedKeys","_splitRawValues","keyList","_conductCheck","conductCheck","_useMemo3","rawValues","rawHalfCheckedKeys","selectValues","mergedRawValues","useSelectValues","triggerChange","extra","source","eventValues","formattedKeyList","triggerValue","returnValues","halfValues","additionalInfo","preValue","showPosition","checkedValues","triggerNode","nodeList","generateMap","parentIncluded","index","pos","included","child","checkedNode","sort","val1","val2","indexOf","_ref3","fillAdditionalInfo","onInternalDropdownVisibleChange","legacyParam","selectProps","optionLabelProp","dropdownAlign","internalProps","mark","INTERNAL_PROPS_MARK","onClear","skipTriggerChange","skipTriggerSelect","onRawSelect","selectValue","eventValue","add","from","addValue","_splitRawValues2","onRawDeselect","delete","removeValue","_splitRawValues3","Provider","mode","TreeSelect","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","this","apply","_createClass","__rest","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","InternalTreeSelect","_a","_classNames2","customizePrefixCls","customizeSize","size","_a$bordered","bordered","_a$listHeight","listHeight","_a$listItemHeight","listItemHeight","_switcherIcon","getPopupContainer","dropdownClassName","_a$treeIcon","transitionName","_a$choiceTransitionNa","choiceTransitionName","ConfigContext","getContextPopupContainer","getPrefixCls","renderEmpty","direction","dropdownMatchSelectWidth","SizeContext","devWarning","mergedNotFound","treePrefixCls","treeSelectPrefixCls","mergedDropdownClassName","classNames","_defineProperty","isMultiple","_getIcons","getIcons","_extends","suffixIcon","removeIcon","clearIcon","omit","mergedSize","mergedClassName","rootPrefixCls","RcTreeSelect","inputIcon","nodeProps","renderSwitcherIcon","getTransitionName","View","setState","state","fetchData","params","Apis","api","then","res","_id","valuepropname","titlepropname","name","otherProps","dropdownStyle","maxHeight","placeholder","Component"],"mappings":"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","file":"static/js/56.28a61596.chunk.js","sourcesContent":["import * as React from 'react';\nexport var SelectContext = /*#__PURE__*/React.createContext(null);","import * as React from 'react';\nexport function isDisabled(dataNode, skipType) {\n  if (!dataNode) {\n    return true;\n  }\n\n  var _dataNode$data = dataNode.data,\n      disabled = _dataNode$data.disabled,\n      disableCheckbox = _dataNode$data.disableCheckbox;\n\n  switch (skipType) {\n    case 'select':\n      return disabled;\n\n    case 'checkbox':\n      return disabled || disableCheckbox;\n  }\n\n  return false;\n}\nexport default function useKeyValueMapping(cacheKeyMap, cacheValueMap) {\n  var getEntityByKey = React.useCallback(function (key) {\n    var skipType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'select';\n    var ignoreDisabledCheck = arguments.length > 2 ? arguments[2] : undefined;\n    var dataNode = cacheKeyMap.get(key);\n\n    if (!ignoreDisabledCheck && isDisabled(dataNode, skipType)) {\n      return null;\n    }\n\n    return dataNode;\n  }, [cacheKeyMap]);\n  var getEntityByValue = React.useCallback(function (value) {\n    var skipType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'select';\n    var ignoreDisabledCheck = arguments.length > 2 ? arguments[2] : undefined;\n    var dataNode = cacheValueMap.get(value);\n\n    if (!ignoreDisabledCheck && isDisabled(dataNode, skipType)) {\n      return null;\n    }\n\n    return dataNode;\n  }, [cacheValueMap]);\n  return [getEntityByKey, getEntityByValue];\n}","import * as React from 'react';\n/**\n * Return cached Key Value map with DataNode.\n * Only re-calculate when `flattenOptions` changed.\n */\n\nexport default function useKeyValueMap(flattenOptions) {\n  return React.useMemo(function () {\n    var cacheKeyMap = new Map();\n    var cacheValueMap = new Map(); // Cache options by key\n\n    flattenOptions.forEach(function (dataNode) {\n      cacheKeyMap.set(dataNode.key, dataNode);\n      cacheValueMap.set(dataNode.data.value, dataNode);\n    });\n    return [cacheKeyMap, cacheValueMap];\n  }, [flattenOptions]);\n}","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport useMemo from \"rc-util/es/hooks/useMemo\";\nimport Tree from 'rc-tree';\nimport { SelectContext } from './Context';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nvar HIDDEN_STYLE = {\n  width: 0,\n  height: 0,\n  display: 'flex',\n  overflow: 'hidden',\n  opacity: 0,\n  border: 0,\n  padding: 0,\n  margin: 0\n};\n\nvar OptionList = function OptionList(props, ref) {\n  var prefixCls = props.prefixCls,\n      height = props.height,\n      itemHeight = props.itemHeight,\n      virtual = props.virtual,\n      options = props.options,\n      flattenOptions = props.flattenOptions,\n      multiple = props.multiple,\n      searchValue = props.searchValue,\n      onSelect = props.onSelect,\n      onToggleOpen = props.onToggleOpen,\n      open = props.open,\n      notFoundContent = props.notFoundContent,\n      onMouseEnter = props.onMouseEnter;\n\n  var _React$useContext = React.useContext(SelectContext),\n      checkable = _React$useContext.checkable,\n      checkedKeys = _React$useContext.checkedKeys,\n      halfCheckedKeys = _React$useContext.halfCheckedKeys,\n      treeExpandedKeys = _React$useContext.treeExpandedKeys,\n      treeDefaultExpandAll = _React$useContext.treeDefaultExpandAll,\n      treeDefaultExpandedKeys = _React$useContext.treeDefaultExpandedKeys,\n      onTreeExpand = _React$useContext.onTreeExpand,\n      treeIcon = _React$useContext.treeIcon,\n      showTreeIcon = _React$useContext.showTreeIcon,\n      switcherIcon = _React$useContext.switcherIcon,\n      treeLine = _React$useContext.treeLine,\n      treeNodeFilterProp = _React$useContext.treeNodeFilterProp,\n      loadData = _React$useContext.loadData,\n      treeLoadedKeys = _React$useContext.treeLoadedKeys,\n      treeMotion = _React$useContext.treeMotion,\n      onTreeLoad = _React$useContext.onTreeLoad;\n\n  var treeRef = React.useRef();\n  var memoOptions = useMemo(function () {\n    return options;\n  }, [open, options], function (prev, next) {\n    return next[0] && prev[1] !== next[1];\n  });\n\n  var _useKeyValueMap = useKeyValueMap(flattenOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // ========================== Values ==========================\n\n\n  var valueKeys = React.useMemo(function () {\n    return checkedKeys.map(function (val) {\n      var entity = getEntityByValue(val);\n      return entity ? entity.key : null;\n    });\n  }, [checkedKeys]);\n  var mergedCheckedKeys = React.useMemo(function () {\n    if (!checkable) {\n      return null;\n    }\n\n    return {\n      checked: valueKeys,\n      halfChecked: halfCheckedKeys\n    };\n  }, [valueKeys, halfCheckedKeys, checkable]); // ========================== Scroll ==========================\n\n  React.useEffect(function () {\n    // Single mode should scroll to current key\n    if (open && !multiple && valueKeys.length) {\n      var _treeRef$current;\n\n      (_treeRef$current = treeRef.current) === null || _treeRef$current === void 0 ? void 0 : _treeRef$current.scrollTo({\n        key: valueKeys[0]\n      });\n    }\n  }, [open]); // ========================== Search ==========================\n\n  var lowerSearchValue = String(searchValue).toLowerCase();\n\n  var filterTreeNode = function filterTreeNode(treeNode) {\n    if (!lowerSearchValue) {\n      return false;\n    }\n\n    return String(treeNode[treeNodeFilterProp]).toLowerCase().includes(lowerSearchValue);\n  }; // =========================== Keys ===========================\n\n\n  var _React$useState = React.useState(treeDefaultExpandedKeys),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      expandedKeys = _React$useState2[0],\n      setExpandedKeys = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      searchExpandedKeys = _React$useState4[0],\n      setSearchExpandedKeys = _React$useState4[1];\n\n  var mergedExpandedKeys = React.useMemo(function () {\n    if (treeExpandedKeys) {\n      return _toConsumableArray(treeExpandedKeys);\n    }\n\n    return searchValue ? searchExpandedKeys : expandedKeys;\n  }, [expandedKeys, searchExpandedKeys, lowerSearchValue, treeExpandedKeys]);\n  React.useEffect(function () {\n    if (searchValue) {\n      setSearchExpandedKeys(flattenOptions.map(function (o) {\n        return o.key;\n      }));\n    }\n  }, [searchValue]);\n\n  var onInternalExpand = function onInternalExpand(keys) {\n    setExpandedKeys(keys);\n    setSearchExpandedKeys(keys);\n\n    if (onTreeExpand) {\n      onTreeExpand(keys);\n    }\n  }; // ========================== Events ==========================\n\n\n  var onListMouseDown = function onListMouseDown(event) {\n    event.preventDefault();\n  };\n\n  var onInternalSelect = function onInternalSelect(_, _ref) {\n    var key = _ref.node.key;\n    var entity = getEntityByKey(key, checkable ? 'checkbox' : 'select');\n\n    if (entity !== null) {\n      onSelect(entity.data.value, {\n        selected: !checkedKeys.includes(entity.data.value)\n      });\n    }\n\n    if (!multiple) {\n      onToggleOpen(false);\n    }\n  }; // ========================= Keyboard =========================\n\n\n  var _React$useState5 = React.useState(null),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      activeKey = _React$useState6[0],\n      setActiveKey = _React$useState6[1];\n\n  var activeEntity = getEntityByKey(activeKey);\n  React.useImperativeHandle(ref, function () {\n    return {\n      onKeyDown: function onKeyDown(event) {\n        var _treeRef$current2;\n\n        var which = event.which;\n\n        switch (which) {\n          // >>> Arrow keys\n          case KeyCode.UP:\n          case KeyCode.DOWN:\n          case KeyCode.LEFT:\n          case KeyCode.RIGHT:\n            (_treeRef$current2 = treeRef.current) === null || _treeRef$current2 === void 0 ? void 0 : _treeRef$current2.onKeyDown(event);\n            break;\n          // >>> Select item\n\n          case KeyCode.ENTER:\n            {\n              if (activeEntity !== null) {\n                onInternalSelect(null, {\n                  node: {\n                    key: activeKey\n                  },\n                  selected: !checkedKeys.includes(activeEntity.data.value)\n                });\n              }\n\n              break;\n            }\n          // >>> Close\n\n          case KeyCode.ESC:\n            {\n              onToggleOpen(false);\n            }\n        }\n      },\n      onKeyUp: function onKeyUp() {}\n    };\n  }); // ========================== Render ==========================\n\n  if (memoOptions.length === 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      role: \"listbox\",\n      className: \"\".concat(prefixCls, \"-empty\"),\n      onMouseDown: onListMouseDown\n    }, notFoundContent);\n  }\n\n  var treeProps = {};\n\n  if (treeLoadedKeys) {\n    treeProps.loadedKeys = treeLoadedKeys;\n  }\n\n  if (mergedExpandedKeys) {\n    treeProps.expandedKeys = mergedExpandedKeys;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    onMouseDown: onListMouseDown,\n    onMouseEnter: onMouseEnter\n  }, activeEntity && open && /*#__PURE__*/React.createElement(\"span\", {\n    style: HIDDEN_STYLE,\n    \"aria-live\": \"assertive\"\n  }, activeEntity.data.value), /*#__PURE__*/React.createElement(Tree, Object.assign({\n    ref: treeRef,\n    focusable: false,\n    prefixCls: \"\".concat(prefixCls, \"-tree\"),\n    treeData: memoOptions,\n    height: height,\n    itemHeight: itemHeight,\n    virtual: virtual,\n    multiple: multiple,\n    icon: treeIcon,\n    showIcon: showTreeIcon,\n    switcherIcon: switcherIcon,\n    showLine: treeLine,\n    loadData: searchValue ? null : loadData,\n    motion: treeMotion,\n    // We handle keys by out instead tree self\n    checkable: checkable,\n    checkStrictly: true,\n    checkedKeys: mergedCheckedKeys,\n    selectedKeys: !checkable ? valueKeys : [],\n    defaultExpandAll: treeDefaultExpandAll\n  }, treeProps, {\n    // Proxy event out\n    onActiveChange: setActiveKey,\n    onSelect: onInternalSelect,\n    onCheck: onInternalSelect,\n    onExpand: onInternalExpand,\n    onLoad: onTreeLoad,\n    filterTreeNode: filterTreeNode\n  })));\n};\n\nvar RefOptionList = /*#__PURE__*/React.forwardRef(OptionList);\nRefOptionList.displayName = 'OptionList';\nexport default RefOptionList;","/** This is a placeholder, not real render in dom */\nvar TreeNode = function TreeNode() {\n  return null;\n};\n\nexport default TreeNode;","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from \"rc-util/es/warning\";\nimport TreeNode from '../TreeNode';\nexport function convertChildrenToData(nodes) {\n  return toArray(nodes).map(function (node) {\n    if (! /*#__PURE__*/React.isValidElement(node) || !node.type) {\n      return null;\n    }\n\n    var key = node.key,\n        _node$props = node.props,\n        children = _node$props.children,\n        value = _node$props.value,\n        restProps = _objectWithoutProperties(_node$props, [\"children\", \"value\"]);\n\n    var data = _objectSpread({\n      key: key,\n      value: value\n    }, restProps);\n\n    var childData = convertChildrenToData(children);\n\n    if (childData.length) {\n      data.children = childData;\n    }\n\n    return data;\n  }).filter(function (data) {\n    return data;\n  });\n}\nexport function fillLegacyProps(dataNode) {\n  // Skip if not dataNode exist\n  if (!dataNode) {\n    return dataNode;\n  }\n\n  var cloneNode = _objectSpread({}, dataNode);\n\n  if (!('props' in cloneNode)) {\n    Object.defineProperty(cloneNode, 'props', {\n      get: function get() {\n        warning(false, 'New `rc-tree-select` not support return node instance as argument anymore. Please consider to remove `props` access.');\n        return cloneNode;\n      }\n    });\n  }\n\n  return cloneNode;\n}\nexport function fillAdditionalInfo(extra, triggerValue, checkedValues, treeData, showPosition) {\n  var triggerNode = null;\n  var nodeList = null;\n\n  function generateMap() {\n    function dig(list) {\n      var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '0';\n      var parentIncluded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      return list.map(function (dataNode, index) {\n        var pos = \"\".concat(level, \"-\").concat(index);\n        var included = checkedValues.includes(dataNode.value);\n        var children = dig(dataNode.children || [], pos, included);\n        var node = /*#__PURE__*/React.createElement(TreeNode, Object.assign({}, dataNode), children.map(function (child) {\n          return child.node;\n        })); // Link with trigger node\n\n        if (triggerValue === dataNode.value) {\n          triggerNode = node;\n        }\n\n        if (included) {\n          var checkedNode = {\n            pos: pos,\n            node: node,\n            children: children\n          };\n\n          if (!parentIncluded) {\n            nodeList.push(checkedNode);\n          }\n\n          return checkedNode;\n        }\n\n        return null;\n      }).filter(function (node) {\n        return node;\n      });\n    }\n\n    if (!nodeList) {\n      nodeList = [];\n      dig(treeData); // Sort to keep the checked node length\n\n      nodeList.sort(function (_ref, _ref2) {\n        var val1 = _ref.node.props.value;\n        var val2 = _ref2.node.props.value;\n        var index1 = checkedValues.indexOf(val1);\n        var index2 = checkedValues.indexOf(val2);\n        return index1 - index2;\n      });\n    }\n  }\n\n  Object.defineProperty(extra, 'triggerNode', {\n    get: function get() {\n      warning(false, '`triggerNode` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n      return triggerNode;\n    }\n  });\n  Object.defineProperty(extra, 'allCheckedNodes', {\n    get: function get() {\n      warning(false, '`allCheckedNodes` is deprecated. Please consider decoupling data with node.');\n      generateMap();\n\n      if (showPosition) {\n        return nodeList;\n      }\n\n      return nodeList.map(function (_ref3) {\n        var node = _ref3.node;\n        return node;\n      });\n    }\n  });\n}","import _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport { flattenTreeData } from \"rc-tree/es/utils/treeUtil\";\nimport { fillLegacyProps } from './legacyUtil';\nexport function toArray(value) {\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return value !== undefined ? [value] : [];\n}\nexport function findValueOption(values, options) {\n  var optionMap = new Map();\n  options.forEach(function (flattenItem) {\n    var data = flattenItem.data;\n    optionMap.set(data.value, data);\n  });\n  return values.map(function (val) {\n    return fillLegacyProps(optionMap.get(val));\n  });\n}\nexport function isValueDisabled(value, options) {\n  var option = findValueOption([value], options)[0];\n\n  if (option) {\n    return option.disabled;\n  }\n\n  return false;\n}\nexport function isCheckDisabled(node) {\n  return node.disabled || node.disableCheckbox || node.checkable === false;\n}\n\nfunction getLevel(_ref) {\n  var parent = _ref.parent;\n  var level = 0;\n  var current = parent;\n\n  while (current) {\n    current = current.parent;\n    level += 1;\n  }\n\n  return level;\n}\n/**\n * Before reuse `rc-tree` logic, we need to add key since TreeSelect use `value` instead of `key`.\n */\n\n\nexport function flattenOptions(options) {\n  // Add missing key\n  function fillKey(list) {\n    return (list || []).map(function (node) {\n      var value = node.value,\n          key = node.key,\n          children = node.children;\n\n      var clone = _objectSpread(_objectSpread({}, node), {}, {\n        key: 'key' in node ? key : value\n      });\n\n      if (children) {\n        clone.children = fillKey(children);\n      }\n\n      return clone;\n    });\n  }\n\n  var flattenList = flattenTreeData(fillKey(options), true);\n  return flattenList.map(function (node) {\n    return {\n      key: node.data.key,\n      data: node.data,\n      level: getLevel(node)\n    };\n  });\n}\n\nfunction getDefaultFilterOption(optionFilterProp) {\n  return function (searchValue, dataNode) {\n    var value = dataNode[optionFilterProp];\n    return String(value).toLowerCase().includes(String(searchValue).toLowerCase());\n  };\n}\n/** Filter options and return a new options by the search text */\n\n\nexport function filterOptions(searchValue, options, _ref2) {\n  var optionFilterProp = _ref2.optionFilterProp,\n      filterOption = _ref2.filterOption;\n\n  if (filterOption === false) {\n    return options;\n  }\n\n  var filterOptionFunc;\n\n  if (typeof filterOption === 'function') {\n    filterOptionFunc = filterOption;\n  } else {\n    filterOptionFunc = getDefaultFilterOption(optionFilterProp);\n  }\n\n  function dig(list) {\n    var keepAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return list.map(function (dataNode) {\n      var children = dataNode.children;\n      var match = keepAll || filterOptionFunc(searchValue, fillLegacyProps(dataNode));\n      var childList = dig(children || [], match);\n\n      if (match || childList.length) {\n        return _objectSpread(_objectSpread({}, dataNode), {}, {\n          children: childList\n        });\n      }\n\n      return null;\n    }).filter(function (node) {\n      return node;\n    });\n  }\n\n  return dig(options);\n}\nexport function getRawValueLabeled(values, prevValue, getEntityByValue, getLabelProp) {\n  var valueMap = new Map();\n  toArray(prevValue).forEach(function (item) {\n    if (item && _typeof(item) === 'object' && 'value' in item) {\n      valueMap.set(item.value, item);\n    }\n  });\n  return values.map(function (val) {\n    var item = {\n      value: val\n    };\n    var entity = getEntityByValue(val, 'select', true);\n    var label = entity ? getLabelProp(entity.data) : val;\n\n    if (valueMap.has(val)) {\n      var labeledValue = valueMap.get(val);\n      item.label = 'label' in labeledValue ? labeledValue.label : label;\n\n      if ('halfChecked' in labeledValue) {\n        item.halfChecked = labeledValue.halfChecked;\n      }\n    } else {\n      item.label = label;\n    }\n\n    return item;\n  });\n}\nexport function addValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.add(value);\n  return Array.from(values);\n}\nexport function removeValue(rawValues, value) {\n  var values = new Set(rawValues);\n  values.delete(value);\n  return Array.from(values);\n}","import _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport warning from \"rc-util/es/warning\";\nimport { convertChildrenToData } from '../utils/legacyUtil';\nvar MAX_WARNING_TIMES = 10;\n\nfunction parseSimpleTreeData(treeData, _ref) {\n  var id = _ref.id,\n      pId = _ref.pId,\n      rootPId = _ref.rootPId;\n  var keyNodes = {};\n  var rootNodeList = []; // Fill in the map\n\n  var nodeList = treeData.map(function (node) {\n    var clone = _objectSpread({}, node);\n\n    var key = clone[id];\n    keyNodes[key] = clone;\n    clone.key = clone.key || key;\n    return clone;\n  }); // Connect tree\n\n  nodeList.forEach(function (node) {\n    var parentKey = node[pId];\n    var parent = keyNodes[parentKey]; // Fill parent\n\n    if (parent) {\n      parent.children = parent.children || [];\n      parent.children.push(node);\n    } // Fill root tree node\n\n\n    if (parentKey === rootPId || !parent && rootPId === null) {\n      rootNodeList.push(node);\n    }\n  });\n  return rootNodeList;\n}\n/**\n * Format `treeData` with `value` & `key` which is used for calculation\n */\n\n\nfunction formatTreeData(treeData, getLabelProp) {\n  var warningTimes = 0;\n  var valueSet = new Set();\n\n  function dig(dataNodes) {\n    return (dataNodes || []).map(function (node) {\n      var key = node.key,\n          value = node.value,\n          children = node.children,\n          rest = _objectWithoutProperties(node, [\"key\", \"value\", \"children\"]);\n\n      var mergedValue = 'value' in node ? value : key;\n\n      var dataNode = _objectSpread(_objectSpread({}, rest), {}, {\n        key: key !== null && key !== undefined ? key : mergedValue,\n        value: mergedValue,\n        title: getLabelProp(node)\n      }); // Check `key` & `value` and warning user\n\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (key !== null && key !== undefined && value !== undefined && String(key) !== String(value) && warningTimes < MAX_WARNING_TIMES) {\n          warningTimes += 1;\n          warning(false, \"`key` or `value` with TreeNode must be the same or you can remove one of them. key: \".concat(key, \", value: \").concat(value, \".\"));\n        }\n\n        warning(!valueSet.has(value), \"Same `value` exist in the tree: \".concat(value));\n        valueSet.add(value);\n      }\n\n      if ('children' in node) {\n        dataNode.children = dig(children);\n      }\n\n      return dataNode;\n    });\n  }\n\n  return dig(treeData);\n}\n/**\n * Convert `treeData` or `children` into formatted `treeData`.\n * Will not re-calculate if `treeData` or `children` not change.\n */\n\n\nexport default function useTreeData(treeData, children, _ref2) {\n  var getLabelProp = _ref2.getLabelProp,\n      simpleMode = _ref2.simpleMode;\n  var cacheRef = React.useRef({});\n\n  if (treeData) {\n    cacheRef.current.formatTreeData = cacheRef.current.treeData === treeData ? cacheRef.current.formatTreeData : formatTreeData(simpleMode ? parseSimpleTreeData(treeData, _objectSpread({\n      id: 'id',\n      pId: 'pId',\n      rootPId: null\n    }, simpleMode !== true ? simpleMode : {})) : treeData, getLabelProp);\n    cacheRef.current.treeData = treeData;\n  } else {\n    cacheRef.current.formatTreeData = cacheRef.current.children === children ? cacheRef.current.formatTreeData : formatTreeData(convertChildrenToData(children), getLabelProp);\n  }\n\n  return cacheRef.current.formatTreeData;\n}","import { isCheckDisabled } from './valueUtil';\nexport var SHOW_ALL = 'SHOW_ALL';\nexport var SHOW_PARENT = 'SHOW_PARENT';\nexport var SHOW_CHILD = 'SHOW_CHILD';\nexport function formatStrategyKeys(keys, strategy, keyEntities) {\n  var keySet = new Set(keys);\n\n  if (strategy === SHOW_CHILD) {\n    return keys.filter(function (key) {\n      var entity = keyEntities[key];\n\n      if (entity && entity.children && entity.children.every(function (_ref) {\n        var node = _ref.node;\n        return isCheckDisabled(node) || keySet.has(node.key);\n      })) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  if (strategy === SHOW_PARENT) {\n    return keys.filter(function (key) {\n      var entity = keyEntities[key];\n      var parent = entity ? entity.parent : null;\n\n      if (parent && !isCheckDisabled(parent.node) && keySet.has(parent.node.key)) {\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return keys;\n}","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport generateSelector from \"rc-select/es/generate\";\nimport { getLabeledValue } from \"rc-select/es/utils/valueUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { INTERNAL_PROPS_MARK } from \"rc-select/es/interface/generator\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport warning from \"rc-util/es/warning\";\nimport OptionList from './OptionList';\nimport TreeNode from './TreeNode';\nimport { flattenOptions, filterOptions, isValueDisabled, findValueOption, addValue, removeValue, getRawValueLabeled, toArray } from './utils/valueUtil';\nimport warningProps from './utils/warningPropsUtil';\nimport { SelectContext } from './Context';\nimport useTreeData from './hooks/useTreeData';\nimport useKeyValueMap from './hooks/useKeyValueMap';\nimport useKeyValueMapping from './hooks/useKeyValueMapping';\nimport { formatStrategyKeys, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './utils/strategyUtil';\nimport { fillAdditionalInfo } from './utils/legacyUtil';\nimport useSelectValues from './hooks/useSelectValues';\nvar OMIT_PROPS = ['expandedKeys', 'treeData', 'treeCheckable', 'showCheckedStrategy', 'searchPlaceholder', 'treeLine', 'treeIcon', 'showTreeIcon', 'switcherIcon', 'treeNodeFilterProp', 'filterTreeNode', 'dropdownPopupAlign', 'treeDefaultExpandAll', 'treeCheckStrictly', 'treeExpandedKeys', 'treeLoadedKeys', 'treeMotion', 'onTreeExpand', 'onTreeLoad', 'loadData', 'treeDataSimpleMode', 'treeNodeLabelProp', 'treeDefaultExpandedKeys'];\nvar RefSelect = generateSelector({\n  prefixCls: 'rc-tree-select',\n  components: {\n    optionList: OptionList\n  },\n  // Not use generate since we will handle ourself\n  convertChildrenToData: function convertChildrenToData() {\n    return null;\n  },\n  flattenOptions: flattenOptions,\n  // Handle `optionLabelProp` in TreeSelect component\n  getLabeledValue: getLabeledValue,\n  filterOptions: filterOptions,\n  isValueDisabled: isValueDisabled,\n  findValueOption: findValueOption,\n  omitDOMProps: function omitDOMProps(props) {\n    var cloneProps = _objectSpread({}, props);\n\n    OMIT_PROPS.forEach(function (prop) {\n      delete cloneProps[prop];\n    });\n    return cloneProps;\n  }\n});\nRefSelect.displayName = 'Select';\nvar RefTreeSelect = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var multiple = props.multiple,\n      treeCheckable = props.treeCheckable,\n      treeCheckStrictly = props.treeCheckStrictly,\n      _props$showCheckedStr = props.showCheckedStrategy,\n      showCheckedStrategy = _props$showCheckedStr === void 0 ? 'SHOW_CHILD' : _props$showCheckedStr,\n      labelInValue = props.labelInValue,\n      loadData = props.loadData,\n      treeLoadedKeys = props.treeLoadedKeys,\n      _props$treeNodeFilter = props.treeNodeFilterProp,\n      treeNodeFilterProp = _props$treeNodeFilter === void 0 ? 'value' : _props$treeNodeFilter,\n      treeNodeLabelProp = props.treeNodeLabelProp,\n      treeDataSimpleMode = props.treeDataSimpleMode,\n      treeData = props.treeData,\n      treeExpandedKeys = props.treeExpandedKeys,\n      treeDefaultExpandedKeys = props.treeDefaultExpandedKeys,\n      treeDefaultExpandAll = props.treeDefaultExpandAll,\n      children = props.children,\n      treeIcon = props.treeIcon,\n      showTreeIcon = props.showTreeIcon,\n      switcherIcon = props.switcherIcon,\n      treeLine = props.treeLine,\n      treeMotion = props.treeMotion,\n      filterTreeNode = props.filterTreeNode,\n      dropdownPopupAlign = props.dropdownPopupAlign,\n      onChange = props.onChange,\n      onTreeExpand = props.onTreeExpand,\n      onTreeLoad = props.onTreeLoad,\n      onDropdownVisibleChange = props.onDropdownVisibleChange,\n      onSelect = props.onSelect,\n      onDeselect = props.onDeselect;\n  var mergedCheckable = treeCheckable || treeCheckStrictly;\n  var mergedMultiple = multiple || mergedCheckable;\n  var treeConduction = treeCheckable && !treeCheckStrictly;\n  var mergedLabelInValue = treeCheckStrictly || labelInValue; // ========================== Ref ==========================\n\n  var selectRef = React.useRef(null);\n  React.useImperativeHandle(ref, function () {\n    return {\n      focus: selectRef.current.focus,\n      blur: selectRef.current.blur\n    };\n  }); // ======================= Tree Data =======================\n  // Legacy both support `label` or `title` if not set.\n  // We have to fallback to function to handle this\n\n  var getTreeNodeTitle = function getTreeNodeTitle(node) {\n    if (!treeData) {\n      return node.title;\n    }\n\n    return node.label || node.title;\n  };\n\n  var getTreeNodeLabelProp = function getTreeNodeLabelProp(node) {\n    if (treeNodeLabelProp) {\n      return node[treeNodeLabelProp];\n    }\n\n    return getTreeNodeTitle(node);\n  };\n\n  var mergedTreeData = useTreeData(treeData, children, {\n    getLabelProp: getTreeNodeTitle,\n    simpleMode: treeDataSimpleMode\n  });\n  var flattedOptions = useMemo(function () {\n    return flattenOptions(mergedTreeData);\n  }, [mergedTreeData]);\n\n  var _useKeyValueMap = useKeyValueMap(flattedOptions),\n      _useKeyValueMap2 = _slicedToArray(_useKeyValueMap, 2),\n      cacheKeyMap = _useKeyValueMap2[0],\n      cacheValueMap = _useKeyValueMap2[1];\n\n  var _useKeyValueMapping = useKeyValueMapping(cacheKeyMap, cacheValueMap),\n      _useKeyValueMapping2 = _slicedToArray(_useKeyValueMapping, 2),\n      getEntityByKey = _useKeyValueMapping2[0],\n      getEntityByValue = _useKeyValueMapping2[1]; // Only generate keyEntities for check conduction when is `treeCheckable`\n\n\n  var _useMemo = useMemo(function () {\n    if (treeConduction) {\n      return convertDataToEntities(mergedTreeData);\n    }\n\n    return {\n      keyEntities: null\n    };\n  }, [mergedTreeData, treeCheckable, treeCheckStrictly]),\n      conductKeyEntities = _useMemo.keyEntities; // ========================= Value =========================\n\n\n  var _useMergedState = useMergedState(props.defaultValue, {\n    value: props.value\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      value = _useMergedState2[0],\n      setValue = _useMergedState2[1];\n  /** Get `missingRawValues` which not exist in the tree yet */\n\n\n  var splitRawValues = function splitRawValues(newRawValues) {\n    var missingRawValues = [];\n    var existRawValues = []; // Keep missing value in the cache\n\n    newRawValues.forEach(function (val) {\n      if (getEntityByValue(val)) {\n        existRawValues.push(val);\n      } else {\n        missingRawValues.push(val);\n      }\n    });\n    return {\n      missingRawValues: missingRawValues,\n      existRawValues: existRawValues\n    };\n  };\n\n  var _useMemo2 = useMemo(function () {\n    var valueHalfCheckedKeys = [];\n    var newRawValues = [];\n    toArray(value).forEach(function (item) {\n      if (item && _typeof(item) === 'object' && 'value' in item) {\n        if (item.halfChecked && treeCheckStrictly) {\n          var entity = getEntityByValue(item.value);\n          valueHalfCheckedKeys.push(entity ? entity.key : item.value);\n        } else {\n          newRawValues.push(item.value);\n        }\n      } else {\n        newRawValues.push(item);\n      }\n    }); // We need do conduction of values\n\n    if (treeConduction) {\n      var _splitRawValues = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues.missingRawValues,\n          existRawValues = _splitRawValues.existRawValues;\n\n      var keyList = existRawValues.map(function (val) {\n        return getEntityByValue(val).key;\n      });\n\n      var _conductCheck = conductCheck(keyList, true, conductKeyEntities),\n          checkedKeys = _conductCheck.checkedKeys,\n          halfCheckedKeys = _conductCheck.halfCheckedKeys;\n\n      return [[].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n        return getEntityByKey(key).data.value;\n      }))), halfCheckedKeys];\n    }\n\n    return [newRawValues, valueHalfCheckedKeys];\n  }, [value, mergedMultiple, mergedLabelInValue, treeCheckable, treeCheckStrictly]),\n      _useMemo3 = _slicedToArray(_useMemo2, 2),\n      rawValues = _useMemo3[0],\n      rawHalfCheckedKeys = _useMemo3[1];\n\n  var selectValues = useSelectValues(rawValues, {\n    treeConduction: treeConduction,\n    value: value,\n    showCheckedStrategy: showCheckedStrategy,\n    conductKeyEntities: conductKeyEntities,\n    getEntityByValue: getEntityByValue,\n    getEntityByKey: getEntityByKey,\n    getLabelProp: getTreeNodeLabelProp\n  });\n\n  var triggerChange = function triggerChange(newRawValues, extra, source) {\n    setValue(mergedMultiple ? newRawValues : newRawValues[0]);\n\n    if (onChange) {\n      var eventValues = newRawValues;\n\n      if (treeConduction && showCheckedStrategy !== 'SHOW_ALL') {\n        var keyList = newRawValues.map(function (val) {\n          var entity = getEntityByValue(val);\n          return entity ? entity.key : val;\n        });\n        var formattedKeyList = formatStrategyKeys(keyList, showCheckedStrategy, conductKeyEntities);\n        eventValues = formattedKeyList.map(function (key) {\n          var entity = getEntityByKey(key);\n          return entity ? entity.data.value : key;\n        });\n      }\n\n      var _ref = extra || {\n        triggerValue: undefined,\n        selected: undefined\n      },\n          triggerValue = _ref.triggerValue,\n          selected = _ref.selected;\n\n      var returnValues = mergedLabelInValue ? getRawValueLabeled(eventValues, value, getEntityByValue, getTreeNodeLabelProp) : eventValues; // We need fill half check back\n\n      if (treeCheckStrictly) {\n        var halfValues = rawHalfCheckedKeys.map(function (key) {\n          var entity = getEntityByKey(key);\n          return entity ? entity.data.value : key;\n        }).filter(function (val) {\n          return !eventValues.includes(val);\n        });\n        returnValues = [].concat(_toConsumableArray(returnValues), _toConsumableArray(getRawValueLabeled(halfValues, value, getEntityByValue, getTreeNodeLabelProp)));\n      }\n\n      var additionalInfo = {\n        // [Legacy] Always return as array contains label & value\n        preValue: selectValues,\n        triggerValue: triggerValue\n      }; // [Legacy] Fill legacy data if user query.\n      // This is expansive that we only fill when user query\n      // https://github.com/react-component/tree-select/blob/fe33eb7c27830c9ac70cd1fdb1ebbe7bc679c16a/src/Select.jsx\n\n      var showPosition = true;\n\n      if (treeCheckStrictly || source === 'selection' && !selected) {\n        showPosition = false;\n      }\n\n      fillAdditionalInfo(additionalInfo, triggerValue, newRawValues, mergedTreeData, showPosition);\n\n      if (mergedCheckable) {\n        additionalInfo.checked = selected;\n      } else {\n        additionalInfo.selected = selected;\n      }\n\n      onChange(mergedMultiple ? returnValues : returnValues[0], mergedLabelInValue ? null : eventValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? getTreeNodeLabelProp(entity.data) : null;\n      }), additionalInfo);\n    }\n  };\n\n  var onInternalSelect = function onInternalSelect(selectValue, option, source) {\n    var eventValue = mergedLabelInValue ? selectValue : selectValue;\n\n    if (!mergedMultiple) {\n      // Single mode always set value\n      triggerChange([selectValue], {\n        selected: true,\n        triggerValue: selectValue\n      }, source);\n    } else {\n      var newRawValues = addValue(rawValues, selectValue); // Add keys if tree conduction\n\n      if (treeConduction) {\n        // Should keep missing values\n        var _splitRawValues2 = splitRawValues(newRawValues),\n            missingRawValues = _splitRawValues2.missingRawValues,\n            existRawValues = _splitRawValues2.existRawValues;\n\n        var keyList = existRawValues.map(function (val) {\n          return getEntityByValue(val).key;\n        });\n\n        var _conductCheck2 = conductCheck(keyList, true, conductKeyEntities),\n            checkedKeys = _conductCheck2.checkedKeys;\n\n        newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n          return getEntityByKey(key).data.value;\n        })));\n      }\n\n      triggerChange(newRawValues, {\n        selected: true,\n        triggerValue: selectValue\n      }, source);\n    }\n\n    if (onSelect) {\n      onSelect(eventValue, option);\n    }\n  };\n\n  var onInternalDeselect = function onInternalDeselect(selectValue, option, source) {\n    var eventValue = mergedLabelInValue ? selectValue : selectValue;\n    var newRawValues = removeValue(rawValues, selectValue); // Remove keys if tree conduction\n\n    if (treeConduction) {\n      var _splitRawValues3 = splitRawValues(newRawValues),\n          missingRawValues = _splitRawValues3.missingRawValues,\n          existRawValues = _splitRawValues3.existRawValues;\n\n      var keyList = existRawValues.map(function (val) {\n        return getEntityByValue(val).key;\n      });\n\n      var _conductCheck3 = conductCheck(keyList, {\n        checked: false,\n        halfCheckedKeys: rawHalfCheckedKeys\n      }, conductKeyEntities),\n          checkedKeys = _conductCheck3.checkedKeys;\n\n      newRawValues = [].concat(_toConsumableArray(missingRawValues), _toConsumableArray(checkedKeys.map(function (key) {\n        return getEntityByKey(key).data.value;\n      })));\n    }\n\n    triggerChange(newRawValues, {\n      selected: false,\n      triggerValue: selectValue\n    }, source);\n\n    if (onDeselect) {\n      onDeselect(eventValue, option);\n    }\n  };\n\n  var onInternalClear = function onInternalClear() {\n    triggerChange([], null, 'clear');\n  }; // ========================= Open ==========================\n\n\n  var onInternalDropdownVisibleChange = React.useCallback(function (open) {\n    if (onDropdownVisibleChange) {\n      var legacyParam = {};\n      Object.defineProperty(legacyParam, 'documentClickClose', {\n        get: function get() {\n          warning(false, 'Second param of `onDropdownVisibleChange` has been removed.');\n          return false;\n        }\n      });\n      onDropdownVisibleChange(open, legacyParam);\n    }\n  }, [onDropdownVisibleChange]); // ======================== Warning ========================\n\n  if (process.env.NODE_ENV !== 'production') {\n    warningProps(props);\n  } // ======================== Render =========================\n  // We pass some props into select props style\n\n\n  var selectProps = {\n    optionLabelProp: null,\n    optionFilterProp: treeNodeFilterProp,\n    dropdownAlign: dropdownPopupAlign,\n    internalProps: {\n      mark: INTERNAL_PROPS_MARK,\n      onClear: onInternalClear,\n      skipTriggerChange: true,\n      skipTriggerSelect: true,\n      onRawSelect: onInternalSelect,\n      onRawDeselect: onInternalDeselect\n    }\n  };\n\n  if ('filterTreeNode' in props) {\n    selectProps.filterOption = filterTreeNode;\n  }\n\n  return /*#__PURE__*/React.createElement(SelectContext.Provider, {\n    value: {\n      checkable: mergedCheckable,\n      loadData: loadData,\n      treeLoadedKeys: treeLoadedKeys,\n      onTreeLoad: onTreeLoad,\n      checkedKeys: rawValues,\n      halfCheckedKeys: rawHalfCheckedKeys,\n      treeDefaultExpandAll: treeDefaultExpandAll,\n      treeExpandedKeys: treeExpandedKeys,\n      treeDefaultExpandedKeys: treeDefaultExpandedKeys,\n      onTreeExpand: onTreeExpand,\n      treeIcon: treeIcon,\n      treeMotion: treeMotion,\n      showTreeIcon: showTreeIcon,\n      switcherIcon: switcherIcon,\n      treeLine: treeLine,\n      treeNodeFilterProp: treeNodeFilterProp\n    }\n  }, /*#__PURE__*/React.createElement(RefSelect, Object.assign({\n    ref: selectRef,\n    mode: mergedMultiple ? 'multiple' : null\n  }, props, selectProps, {\n    value: selectValues,\n    // We will handle this ourself since we need calculate conduction\n    labelInValue: true,\n    options: mergedTreeData,\n    onChange: null,\n    onSelect: null,\n    onDeselect: null,\n    onDropdownVisibleChange: onInternalDropdownVisibleChange\n  })));\n}); // Use class component since typescript not support generic\n// by `forwardRef` with function component yet.\n\nvar TreeSelect = /*#__PURE__*/function (_React$Component) {\n  _inherits(TreeSelect, _React$Component);\n\n  var _super = _createSuper(TreeSelect);\n\n  function TreeSelect() {\n    var _this;\n\n    _classCallCheck(this, TreeSelect);\n\n    _this = _super.apply(this, arguments);\n    _this.selectRef = /*#__PURE__*/React.createRef();\n\n    _this.focus = function () {\n      _this.selectRef.current.focus();\n    };\n\n    _this.blur = function () {\n      _this.selectRef.current.blur();\n    };\n\n    return _this;\n  }\n\n  _createClass(TreeSelect, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(RefTreeSelect, Object.assign({\n        ref: this.selectRef\n      }, this.props));\n    }\n  }]);\n\n  return TreeSelect;\n}(React.Component);\n\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport default TreeSelect;","import * as React from 'react';\nimport { getRawValueLabeled } from '../utils/valueUtil';\nimport { formatStrategyKeys } from '../utils/strategyUtil';\n/** Return  */\n\nexport default function useSelectValues(rawValues, _ref) {\n  var value = _ref.value,\n      getEntityByValue = _ref.getEntityByValue,\n      getEntityByKey = _ref.getEntityByKey,\n      treeConduction = _ref.treeConduction,\n      showCheckedStrategy = _ref.showCheckedStrategy,\n      conductKeyEntities = _ref.conductKeyEntities,\n      getLabelProp = _ref.getLabelProp;\n  return React.useMemo(function () {\n    var mergedRawValues = rawValues;\n\n    if (treeConduction) {\n      var rawKeys = formatStrategyKeys(rawValues.map(function (val) {\n        var entity = getEntityByValue(val);\n        return entity ? entity.key : val;\n      }), showCheckedStrategy, conductKeyEntities);\n      mergedRawValues = rawKeys.map(function (key) {\n        var entity = getEntityByKey(key);\n        return entity ? entity.data.value : key;\n      });\n    }\n\n    return getRawValueLabeled(mergedRawValues, value, getEntityByValue, getLabelProp);\n  }, [rawValues, value, treeConduction, showCheckedStrategy, getEntityByValue]);\n}","import TreeSelect from './TreeSelect';\nimport TreeNode from './TreeNode';\nimport { SHOW_ALL, SHOW_CHILD, SHOW_PARENT } from './utils/strategyUtil';\nexport { TreeNode, SHOW_ALL, SHOW_CHILD, SHOW_PARENT };\nexport default TreeSelect;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport * as React from 'react';\nimport RcTreeSelect, { TreeNode, SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from 'rc-tree-select';\nimport classNames from 'classnames';\nimport omit from \"rc-util/es/omit\";\nimport { ConfigContext } from '../config-provider';\nimport devWarning from '../_util/devWarning';\nimport getIcons from '../select/utils/iconUtil';\nimport renderSwitcherIcon from '../tree/utils/iconUtil';\nimport SizeContext from '../config-provider/SizeContext';\nimport { getTransitionName } from '../_util/motion';\n\nvar InternalTreeSelect = function InternalTreeSelect(_a, ref) {\n  var _classNames2;\n\n  var customizePrefixCls = _a.prefixCls,\n      customizeSize = _a.size,\n      _a$bordered = _a.bordered,\n      bordered = _a$bordered === void 0 ? true : _a$bordered,\n      className = _a.className,\n      treeCheckable = _a.treeCheckable,\n      multiple = _a.multiple,\n      _a$listHeight = _a.listHeight,\n      listHeight = _a$listHeight === void 0 ? 256 : _a$listHeight,\n      _a$listItemHeight = _a.listItemHeight,\n      listItemHeight = _a$listItemHeight === void 0 ? 26 : _a$listItemHeight,\n      notFoundContent = _a.notFoundContent,\n      _switcherIcon = _a.switcherIcon,\n      treeLine = _a.treeLine,\n      getPopupContainer = _a.getPopupContainer,\n      dropdownClassName = _a.dropdownClassName,\n      _a$treeIcon = _a.treeIcon,\n      treeIcon = _a$treeIcon === void 0 ? false : _a$treeIcon,\n      transitionName = _a.transitionName,\n      _a$choiceTransitionNa = _a.choiceTransitionName,\n      choiceTransitionName = _a$choiceTransitionNa === void 0 ? '' : _a$choiceTransitionNa,\n      props = __rest(_a, [\"prefixCls\", \"size\", \"bordered\", \"className\", \"treeCheckable\", \"multiple\", \"listHeight\", \"listItemHeight\", \"notFoundContent\", \"switcherIcon\", \"treeLine\", \"getPopupContainer\", \"dropdownClassName\", \"treeIcon\", \"transitionName\", \"choiceTransitionName\"]);\n\n  var _React$useContext = React.useContext(ConfigContext),\n      getContextPopupContainer = _React$useContext.getPopupContainer,\n      getPrefixCls = _React$useContext.getPrefixCls,\n      renderEmpty = _React$useContext.renderEmpty,\n      direction = _React$useContext.direction,\n      virtual = _React$useContext.virtual,\n      dropdownMatchSelectWidth = _React$useContext.dropdownMatchSelectWidth;\n\n  var size = React.useContext(SizeContext);\n  devWarning(multiple !== false || !treeCheckable, 'TreeSelect', '`multiple` will alway be `true` when `treeCheckable` is true');\n  var prefixCls = getPrefixCls('select', customizePrefixCls);\n  var treePrefixCls = getPrefixCls('select-tree', customizePrefixCls);\n  var treeSelectPrefixCls = getPrefixCls('tree-select', customizePrefixCls);\n  var mergedDropdownClassName = classNames(dropdownClassName, \"\".concat(treeSelectPrefixCls, \"-dropdown\"), _defineProperty({}, \"\".concat(treeSelectPrefixCls, \"-dropdown-rtl\"), direction === 'rtl'));\n  var isMultiple = !!(treeCheckable || multiple); // ===================== Icons =====================\n\n  var _getIcons = getIcons(_extends(_extends({}, props), {\n    multiple: isMultiple,\n    prefixCls: prefixCls\n  })),\n      suffixIcon = _getIcons.suffixIcon,\n      removeIcon = _getIcons.removeIcon,\n      clearIcon = _getIcons.clearIcon; // ===================== Empty =====================\n\n\n  var mergedNotFound;\n\n  if (notFoundContent !== undefined) {\n    mergedNotFound = notFoundContent;\n  } else {\n    mergedNotFound = renderEmpty('Select');\n  } // ==================== Render =====================\n\n\n  var selectProps = omit(props, ['suffixIcon', 'itemIcon', 'removeIcon', 'clearIcon', 'switcherIcon']);\n  var mergedSize = customizeSize || size;\n  var mergedClassName = classNames(!customizePrefixCls && treeSelectPrefixCls, (_classNames2 = {}, _defineProperty(_classNames2, \"\".concat(prefixCls, \"-lg\"), mergedSize === 'large'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-sm\"), mergedSize === 'small'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-rtl\"), direction === 'rtl'), _defineProperty(_classNames2, \"\".concat(prefixCls, \"-borderless\"), !bordered), _classNames2), className);\n  var rootPrefixCls = getPrefixCls();\n  return /*#__PURE__*/React.createElement(RcTreeSelect, _extends({\n    virtual: virtual,\n    dropdownMatchSelectWidth: dropdownMatchSelectWidth\n  }, selectProps, {\n    ref: ref,\n    prefixCls: prefixCls,\n    className: mergedClassName,\n    listHeight: listHeight,\n    listItemHeight: listItemHeight,\n    treeCheckable: treeCheckable ? /*#__PURE__*/React.createElement(\"span\", {\n      className: \"\".concat(prefixCls, \"-tree-checkbox-inner\")\n    }) : treeCheckable,\n    inputIcon: suffixIcon,\n    multiple: multiple,\n    removeIcon: removeIcon,\n    clearIcon: clearIcon,\n    switcherIcon: function switcherIcon(nodeProps) {\n      return renderSwitcherIcon(treePrefixCls, _switcherIcon, treeLine, nodeProps);\n    },\n    showTreeIcon: treeIcon,\n    notFoundContent: mergedNotFound,\n    getPopupContainer: getPopupContainer || getContextPopupContainer,\n    treeMotion: null,\n    dropdownClassName: mergedDropdownClassName,\n    choiceTransitionName: getTransitionName(rootPrefixCls, '', choiceTransitionName),\n    transitionName: getTransitionName(rootPrefixCls, 'slide-up', transitionName)\n  }));\n};\n\nvar TreeSelectRef = /*#__PURE__*/React.forwardRef(InternalTreeSelect);\nvar TreeSelect = TreeSelectRef;\nTreeSelect.TreeNode = TreeNode;\nTreeSelect.SHOW_ALL = SHOW_ALL;\nTreeSelect.SHOW_PARENT = SHOW_PARENT;\nTreeSelect.SHOW_CHILD = SHOW_CHILD;\nexport { TreeNode };\nexport default TreeSelect;","import React, { Component } from \"react\";\r\nimport { TreeSelect } from 'antd';\r\nimport Apis from '@/apis'\r\n\r\nclass View extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      treeData: [],\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    this.fetchData()\r\n  }\r\n  \r\n  fetchData(params={}){\r\n    if(Apis[this.props.api]){\r\n      Apis[this.props.api]({\r\n        ...this.props.params || {},\r\n        ...params\r\n      }).then(res => {\r\n        if(Array.isArray(res.data.list)){\r\n          res.data.list.forEach(item => {\r\n            item.id = item._id\r\n            item.key = this.props.valuepropname ? item[this.props.valuepropname] : item._id\r\n            item.title = this.props.titlepropname ? item[this.props.titlepropname] : (item.title || item.name)\r\n            item.value = this.props.valuepropname ? item[this.props.valuepropname] : item._id\r\n          })\r\n          this.setState({\r\n            treeData: res.data.list\r\n          })\r\n        }else{\r\n          this.setState({\r\n            treeData: []\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  onChange = value => {\r\n    // console.log(value);\r\n    this.setState({ value });\r\n    const { onChange } = this.props\r\n    if(onChange) onChange(value)\r\n  };\r\n\r\n  render() {\r\n    const { value, onChange, ...otherProps } = this.props\r\n    const { treeData } = this.state;\r\n    return (\r\n      <TreeSelect\r\n        treeDataSimpleMode\r\n        style={{ width: '100%' }}\r\n        value={value}\r\n        dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\r\n        placeholder=\"请选择\"\r\n        onChange={this.onChange}\r\n        treeData={treeData}\r\n        treeDefaultExpandAll\r\n        {...otherProps}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default View"],"sourceRoot":""}