{"version":3,"sources":["components/cascader/index.js"],"names":["View","props","onChange","value","setState","state","treeData","this","fetchData","params","Apis","api","then","res","Array","isArray","loop","pid","children","filter","val","pId","forEach","item","label","valuepropname","title","name","_id","id","key","_res","length","sort","a","b","sortIndex","otherProps","options","style","width","placeholder","Component"],"mappings":"4NAIMA,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IA+CRC,SAAW,SAAAC,GACT,EAAKC,SAAS,CAAED,UADE,IAEVD,EAAa,EAAKD,MAAlBC,SACLA,GAAUA,EAASC,IAjDtB,EAAKE,MAAQ,CACXC,SAAU,IAHI,E,qDAMlB,WACEC,KAAKC,c,uBAGP,WAAqB,IAAD,OAAVC,EAAU,uDAAH,GACXR,EAAQM,KAAKN,MACdS,IAAKH,KAAKN,MAAMU,MACjBD,IAAKH,KAAKN,MAAMU,KAAhB,2BACKJ,KAAKN,MAAMQ,QAAU,IACrBA,IACFG,MAAK,SAAAC,GACN,GAAGC,MAAMC,QAAQF,GAAK,CAmBpB,EAAKT,SAAS,CACZE,SAnBF,SAASU,EAAKC,GACZ,IAAIC,EAAWL,EAAIM,QAAO,SAAAC,GAAG,OAAIA,EAAIC,MAAQJ,MAAQ,GAerD,OAdAC,EAASI,SAAQ,SAAAC,GACf,IAAIC,EAAQvB,EAAMwB,cAAgBF,EAAKtB,EAAMwB,eAAkBF,EAAKG,OAASH,EAAKI,KAChFxB,EAAQF,EAAMwB,cAAgBF,EAAKtB,EAAMwB,eAAiBF,EAAKK,IACjEL,EAAKM,GAAK1B,EACVoB,EAAKO,IAAM3B,EACXoB,EAAKC,MAAQA,EACbD,EAAKG,MAAQF,EACbD,EAAKpB,MAAQA,EACb,IAAI4B,EAAOf,EAAKO,EAAKK,KAClBG,EAAKC,SAAQT,EAAKL,SAAWa,MAElCb,EAASe,MAAK,SAACC,EAAGC,GAChB,OAAOD,EAAEE,UAAYD,EAAEC,aAElBlB,EAGGF,CAAK,WAGjB,EAAKZ,SAAS,CACZE,SAAU,U,oBAapB,WAAU,IAAD,EACoCC,KAAKN,MAAxCE,EADD,EACCA,MAAoBkC,GADrB,EACQnC,SADR,qCAECI,EAAaC,KAAKF,MAAlBC,SACR,OACE,kBAAC,IAAD,aACEgC,QAAShC,EACTH,MAAOA,EACPoC,MAAO,CAAEC,MAAO,QAChBC,YAAY,qBACZvC,SAAUK,KAAKL,UACXmC,Q,GAjEOK,aAsEJ1C","file":"static/js/58.a45e1b81.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Cascader } from 'antd';\r\nimport Apis from '@/apis'\r\n\r\nclass View extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      treeData: [],\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    this.fetchData()\r\n  }\r\n  \r\n  fetchData(params={}){\r\n    let props = this.props\r\n    if(Apis[this.props.api]){\r\n      Apis[this.props.api]({\r\n        ...this.props.params || {},\r\n        ...params\r\n      }).then(res => {\r\n        if(Array.isArray(res)){\r\n          function loop(pid){\r\n            let children = res.filter(val => val.pId === pid) || [];\r\n            children.forEach(item => {\r\n              let label = props.valuepropname ? item[props.valuepropname] : (item.title || item.name),\r\n                value = props.valuepropname ? item[props.valuepropname] : item._id\r\n              item.id = value\r\n              item.key = value\r\n              item.label = label\r\n              item.title = label\r\n              item.value = value\r\n              let _res = loop(item._id);\r\n              if(_res.length) item.children = _res;\r\n            });\r\n            children.sort((a, b) => {\r\n              return a.sortIndex - b.sortIndex;\r\n            });\r\n            return children;\r\n          }\r\n          this.setState({\r\n            treeData: loop('')\r\n          })\r\n        }else{\r\n          this.setState({\r\n            treeData: []\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  onChange = value => {\r\n    this.setState({ value });\r\n    const { onChange } = this.props\r\n    if(onChange) onChange(value)\r\n  };\r\n\r\n  render() {\r\n    const { value, onChange, ...otherProps } = this.props\r\n    const { treeData } = this.state;\r\n    return (\r\n      <Cascader\r\n        options={treeData}\r\n        value={value}\r\n        style={{ width: '100%' }}\r\n        placeholder=\"请选择\"\r\n        onChange={this.onChange}\r\n        {...otherProps}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default View"],"sourceRoot":""}